{"title":"基础 - 数组的类型","uid":"bb4675de51cf9271a480ed892e5e9379","slug":"typescript/基础/数组的类型","date":"2023-01-05T09:45:01.484Z","updated":"2023-01-05T10:01:04.290Z","comments":true,"path":"api/articles/typescript/基础/数组的类型.json","keywords":null,"cover":"https://whitelabelcoders.com/app/uploads/18.jpg","content":"<h1 id=\"数组的类型\"><a href=\"#数组的类型\" class=\"headerlink\" title=\"数组的类型\"></a>数组的类型</h1><p>在 TypeScript 中，数组类型有多种定义方式，比较灵活。</p>\n<h2 id=\"「类型-方括号」表示法\"><a href=\"#「类型-方括号」表示法\" class=\"headerlink\" title=\"「类型 + 方括号」表示法\"></a>「类型 + 方括号」表示法</h2><p>最简单的方法是使用「类型 + 方括号」来表示数组：</p>\n<pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">let fibonacci: number[] &#x3D; [1, 1, 2, 3, 5];</code></pre>\n\n<p>数组的项中<strong>不允许</strong>出现其他的类型：</p>\n<pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">let fibonacci: number[] &#x3D; [1, &#39;1&#39;, 2, 3, 5];\n\n&#x2F;&#x2F; Type &#39;string&#39; is not assignable to type &#39;number&#39;.</code></pre>\n\n<p>数组的一些方法的参数也会根据数组在定义时约定的类型进行限制：</p>\n<pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">let fibonacci: number[] &#x3D; [1, 1, 2, 3, 5];\nfibonacci.push(&#39;8&#39;);\n\n&#x2F;&#x2F; Argument of type &#39;&quot;8&quot;&#39; is not assignable to parameter of type &#39;number&#39;.</code></pre>\n\n<p>上例中，<code>push</code> 方法只允许传入 <code>number</code> 类型的参数，但是却传了一个 <code>&quot;8&quot;</code> 类型的参数，所以报错了。这里 <code>&quot;8&quot;</code> 是一个字符串字面量类型，会在后续章节中详细介绍。</p>\n<h2 id=\"数组泛型\"><a href=\"#数组泛型\" class=\"headerlink\" title=\"数组泛型\"></a>数组泛型</h2><p>我们也可以使用数组泛型（Array Generic） Array<elemType> 来表示数组：</p>\n<pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">let fibonacci: Array&lt;number&gt; &#x3D; [1, 1, 2, 3, 5];</code></pre>\n\n<p>关于泛型，可以参考<a href=\"\">泛型</a>一章。</p>\n<h2 id=\"用接口表示数组\"><a href=\"#用接口表示数组\" class=\"headerlink\" title=\"用接口表示数组\"></a>用接口表示数组</h2><p>接口也可以用来描述数组：</p>\n<pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">interface NumberArray &#123;\n    [index: number]: number;\n&#125;\nlet fibonacci: NumberArray &#x3D; [1, 1, 2, 3, 5];</code></pre>\n\n<p><code>NumberArray</code> 表示：只要索引的类型是数字时，那么值的类型必须是数字。</p>\n<p>虽然接口也可以用来描述数组，但是我们一般不会这么做，因为这种方式比前两种方式复杂多了。</p>\n<p>不过有一种情况例外，那就是它常用来表示类数组。</p>\n<h2 id=\"类数组\"><a href=\"#类数组\" class=\"headerlink\" title=\"类数组\"></a>类数组</h2><p>类数组（Array-like Object）不是数组类型，比如 arguments：</p>\n<pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">function sum() &#123;\n    let args: number[] &#x3D; arguments;\n&#125;\n\n&#x2F;&#x2F; Type &#39;IArguments&#39; is missing the following properties from type &#39;number[]&#39;: pop, push, concat, join, and 24 more.</code></pre>\n\n<p>上例中，arguments 实际上是一个类数组，不能用普通的数组的方式来描述，而应该用接口：</p>\n<pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">function sum() &#123;\n    let args: &#123;\n        [index: number]: number;\n        length: number;\n        callee: Function;\n    &#125; &#x3D; arguments;\n&#125;</code></pre>\n\n<p>在这个例子中，我们除了约束当索引的类型是数字时，值的类型必须是数字之外，也约束了它还有 <code>length</code> 和 <code>callee</code> 两个属性。</p>\n<p>事实上常用的类数组都有自己的接口定义，如 <code>IArguments</code>, <code>NodeList</code>, <code>HTMLCollection</code> 等：</p>\n<pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">function sum() &#123;\n    let args: IArguments &#x3D; arguments;\n&#125;</code></pre>\n\n<p>其中 IArguments 是 TypeScript 中定义好了的类型，它实际上就是：</p>\n<pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">interface IArguments &#123;\n    [index: number]: any;\n    length: number;\n    callee: Function;\n&#125;</code></pre>\n\n<p>关于内置对象，可以参考<a href=\"\">内置对象</a>一章。</p>\n<h2 id=\"any-在数组中的应用\"><a href=\"#any-在数组中的应用\" class=\"headerlink\" title=\"any 在数组中的应用\"></a>any 在数组中的应用</h2><p>一个比较常见的做法是，用 any 表示数组中允许出现任意类型：</p>\n<pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">interface IArguments &#123;\n    [index: number]: any;\n    length: number;\n    callee: Function;\n&#125;</code></pre>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#array\">Basic Types # Array</a></li>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/interfaces.html#indexable-types\">Interfaces # Indexable Types</a></li>\n</ul>\n","text":"数组的类型在 TypeScript 中，数组类型有多种定义方式，比较灵活。 「类型 + 方括号」表示法最简单的方法是使用「类型 + 方括号」来表示数组： let fibonacci: number[] &#x3D; [1, 1, 2, 3, 5]; 数组的项中不允许出现其他的类型...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"TypeScript入门","slug":"TypeScript入门","count":19,"path":"api/categories/TypeScript入门.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":22,"path":"api/tags/TypeScript.json"},{"name":"类型","slug":"类型","count":4,"path":"api/tags/类型.json"},{"name":"数组","slug":"数组","count":1,"path":"api/tags/数组.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">数组的类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E3%80%8C%E7%B1%BB%E5%9E%8B-%E6%96%B9%E6%8B%AC%E5%8F%B7%E3%80%8D%E8%A1%A8%E7%A4%BA%E6%B3%95\"><span class=\"toc-text\">「类型 + 方括号」表示法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">数组泛型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%8E%A5%E5%8F%A3%E8%A1%A8%E7%A4%BA%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">用接口表示数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">类数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#any-%E5%9C%A8%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">any 在数组中的应用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol></li></ol>","author":{"name":"木木木","slug":"blog-author","avatar":"https://homeimage.hoiyee.net/lbs/2023-1-3/ywa8wim0wn_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230103144606.jpg","link":"/","description":"一位正在重塑和新增知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"基础 - 函数的类型","uid":"29afe61d2c425b0032ecc379d9200dbe","slug":"typescript/基础/函数的类型","date":"2023-01-06T02:30:32.294Z","updated":"2023-01-10T06:36:31.425Z","comments":true,"path":"api/articles/typescript/基础/函数的类型.json","keywords":null,"cover":"https://whitelabelcoders.com/app/uploads/18.jpg","text":"函数的类型函数的声明一个函数有输入和输出，要在 TypeScript 中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义较简单： function sum(x: number, y:number): number &#123; return x + y &#125;...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"TypeScript入门","slug":"TypeScript入门","count":19,"path":"api/categories/TypeScript入门.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":22,"path":"api/tags/TypeScript.json"},{"name":"类型","slug":"类型","count":4,"path":"api/tags/类型.json"},{"name":"函数","slug":"函数","count":1,"path":"api/tags/函数.json"}],"author":{"name":"木木木","slug":"blog-author","avatar":"https://homeimage.hoiyee.net/lbs/2023-1-3/ywa8wim0wn_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230103144606.jpg","link":"/","description":"一位正在重塑和新增知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"基础 - 对象的类型——接口","uid":"681258ab14d4e7b50ea459ce622019e2","slug":"typescript/基础/对象的类型——接口","date":"2023-01-05T08:16:54.245Z","updated":"2023-01-06T06:35:45.981Z","comments":true,"path":"api/articles/typescript/基础/对象的类型——接口.json","keywords":null,"cover":"https://whitelabelcoders.com/app/uploads/18.jpg","text":"对象的类型——接口在 TypeScript 中，我们使用接口（Interfaces）来定义对象的类型。 什么是接口在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implement）。 TypeS...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"TypeScript入门","slug":"TypeScript入门","count":19,"path":"api/categories/TypeScript入门.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":22,"path":"api/tags/TypeScript.json"},{"name":"类型","slug":"类型","count":4,"path":"api/tags/类型.json"}],"author":{"name":"木木木","slug":"blog-author","avatar":"https://homeimage.hoiyee.net/lbs/2023-1-3/ywa8wim0wn_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230103144606.jpg","link":"/","description":"一位正在重塑和新增知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}