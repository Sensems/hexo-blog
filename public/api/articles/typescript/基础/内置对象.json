{"title":"基础 - 内置对象","uid":"e2d507142ea3f2327476845d7100fc3b","slug":"typescript/基础/内置对象","date":"2023-01-10T08:41:16.613Z","updated":"2023-01-10T08:49:57.884Z","comments":true,"path":"api/articles/typescript/基础/内置对象.json","keywords":null,"cover":"https://whitelabelcoders.com/app/uploads/18.jpg","content":"<h1 id=\"内置对象\"><a href=\"#内置对象\" class=\"headerlink\" title=\"内置对象\"></a>内置对象</h1><p>JavaScript 中有很多<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\">内置对象</a>，它们可以直接在 TypeScript 中当做定义好了的类型。</p>\n<p>内置对象是指根据标准在全局作用域（Global）上存在的对象。这里的标准是指 ECMAScript 和其他环境（比如 DOM）的标准。</p>\n<h2 id=\"ECMAScript-的内置对象\"><a href=\"#ECMAScript-的内置对象\" class=\"headerlink\" title=\"ECMAScript 的内置对象\"></a>ECMAScript 的内置对象</h2><p>ECMAScript 标准提供的内置对象有：</p>\n<p><code>Boolean</code>、<code>Error</code>、<code>Date</code>、<code>RegExp</code> 等。</p>\n<p>我们可以在 TypeScript 中将变量定义为这些类型：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">let b: Boolean &#x3D; new Boolean(1);\nlet e: Error &#x3D; new Error(&#39;Error occurred&#39;);\nlet d: Date &#x3D; new Date();\nlet r: RegExp &#x3D; &#x2F;[a-z]&#x2F;;</code></pre>\n\n<p>更多的内置对象，可以查看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\">MDN 的文档</a>。</p>\n<p>而他们的定义文件，则在 <a href=\"https://github.com/Microsoft/TypeScript/tree/master/src/lib\">TypeScript 核心库的定义文件</a>中。</p>\n<h2 id=\"DOM-和-BOM-的内置对象\"><a href=\"#DOM-和-BOM-的内置对象\" class=\"headerlink\" title=\"DOM 和 BOM 的内置对象\"></a>DOM 和 BOM 的内置对象</h2><p>DOM 和 BOM 提供的内置对象有：</p>\n<p><code>Document</code>、<code>HTMLElement</code>、<code>Event</code>、<code>NodeList</code> 等。</p>\n<p>TypeScript 中会经常用到这些类型：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">let body: HTMLElement &#x3D; document.body;\nlet allDiv: NodeList &#x3D; document.querySelectorAll(&#39;div&#39;);\ndocument.addEventListener(&#39;click&#39;, function(e: MouseEvent) &#123;\n  &#x2F;&#x2F; Do something\n&#125;);</code></pre>\n\n<p>它们的定义文件同样在 <a href=\"https://github.com/Microsoft/TypeScript/tree/master/src/lib\">TypeScript 核心库的定义文件</a>中。</p>\n<h2 id=\"TypeScript-核心库的定义文件\"><a href=\"#TypeScript-核心库的定义文件\" class=\"headerlink\" title=\"TypeScript 核心库的定义文件\"></a>TypeScript 核心库的定义文件</h2><p><a href=\"https://github.com/Microsoft/TypeScript/tree/master/src/lib\">TypeScript 核心库的定义文件</a>中定义了所有浏览器环境需要用到的类型，并且是预置在 TypeScript 中的。</p>\n<p>当你在使用一些常用的方法的时候，TypeScript 实际上已经帮你做了很多类型判断的工作了，比如：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">Math.pow(10, &#39;2&#39;);\n\n&#x2F;&#x2F; index.ts(1,14): error TS2345: Argument of type &#39;string&#39; is not assignable to parameter of type &#39;number&#39;.</code></pre>\n\n<p>上面的例子中，<code>Math.pow</code> 必须接受两个 <code>number</code> 类型的参数。事实上 <code>Math.pow</code> 的类型定义如下：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">interface Math &#123;\n    &#x2F;**\n     * Returns the value of a base expression taken to a specified power.\n     * @param x The base value of the expression.\n     * @param y The exponent value of the expression.\n     *&#x2F;\n    pow(x: number, y: number): number;\n&#125;</code></pre>\n\n<p>再举一个 DOM 中的例子：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">document.addEventListener(&#39;click&#39;, function(e) &#123;\n    console.log(e.targetCurrent);\n&#125;);\n\n&#x2F;&#x2F; index.ts(2,17): error TS2339: Property &#39;targetCurrent&#39; does not exist on type &#39;MouseEvent&#39;.</code></pre>\n\n<p>上面的例子中，<code>addEventListener</code> 方法是在 TypeScript 核心库中定义的：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">interface Document extends Node, GlobalEventHandlers, NodeSelector, DocumentEvent &#123;\n    addEventListener(type: string, listener: (ev: MouseEvent) &#x3D;&gt; any, useCapture?: boolean): void;\n&#125;</code></pre>\n\n<p>所以 <code>e</code> 被推断成了 <code>MouseEvent</code>，而 <code>MouseEvent</code> 是没有 <code>targetCurrent</code> 属性的，所以报错了。</p>\n<p>注意，TypeScript 核心库的定义中不包含 Node.js 部分。</p>\n<h2 id=\"用-TypeScript-写-Node-js\"><a href=\"#用-TypeScript-写-Node-js\" class=\"headerlink\" title=\"用 TypeScript 写 Node.js\"></a>用 TypeScript 写 Node.js</h2><p>Node.js 不是内置对象的一部分，如果想用 TypeScript 写 Node.js，则需要引入第三方声明文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm install @types&#x2F;node --save-dev</code></pre>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\">内置对象</a></li>\n<li><a href=\"https://github.com/Microsoft/TypeScript/tree/master/src/lib\">TypeScript 核心库的定义文件</a></li>\n</ul>\n","feature":true,"text":"内置对象JavaScript 中有很多内置对象，它们可以直接在 TypeScript 中当做定义好了的类型。 内置对象是指根据标准在全局作用域（Global）上存在的对象。这里的标准是指 ECMAScript 和其他环境（比如 DOM）的标准。 ECMAScript 的内置对象E...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"TypeScript入门","slug":"TypeScript入门","count":11,"path":"api/categories/TypeScript入门.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":14,"path":"api/tags/TypeScript.json"},{"name":"基础","slug":"基础","count":6,"path":"api/tags/基础.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">内置对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ECMAScript-%E7%9A%84%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">ECMAScript 的内置对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DOM-%E5%92%8C-BOM-%E7%9A%84%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">DOM 和 BOM 的内置对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TypeScript-%E6%A0%B8%E5%BF%83%E5%BA%93%E7%9A%84%E5%AE%9A%E4%B9%89%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">TypeScript 核心库的定义文件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8-TypeScript-%E5%86%99-Node-js\"><span class=\"toc-text\">用 TypeScript 写 Node.js</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol></li></ol>","author":{"name":"木木木","slug":"blog-author","avatar":"https://homeimage.hoiyee.net/lbs/2023-1-3/ywa8wim0wn_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230103144606.jpg","link":"/","description":"一位正在重塑和新增知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"基础 - 声明文件","uid":"4fa72d19c14aa96fb5e16c70521c71a4","slug":"typescript/基础/声明文件","date":"2023-01-10T08:29:21.761Z","updated":"2023-01-10T08:39:08.180Z","comments":true,"path":"api/articles/typescript/基础/声明文件.json","keywords":null,"cover":"https://whitelabelcoders.com/app/uploads/18.jpg","text":"声明文件当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。 新语法索引§由于本章涉及大量新语法，故在本章开头列出新语法的索引，方便大家在使用这些新语法时能快速查找到对应的讲解： declare var 声明全局变量 declare functio...","link":"","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"22 mins."},"categories":[{"name":"TypeScript入门","slug":"TypeScript入门","count":11,"path":"api/categories/TypeScript入门.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":14,"path":"api/tags/TypeScript.json"}],"author":{"name":"木木木","slug":"blog-author","avatar":"https://homeimage.hoiyee.net/lbs/2023-1-3/ywa8wim0wn_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230103144606.jpg","link":"/","description":"一位正在重塑和新增知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}