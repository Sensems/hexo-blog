{"title":"进阶 - 枚举","uid":"166aa4a154e3566e6dbc6748e810dd70","slug":"typescript/进阶/枚举","date":"2023-01-11T06:19:25.299Z","updated":"2023-01-13T07:12:15.776Z","comments":true,"path":"api/articles/typescript/进阶/枚举.json","keywords":null,"cover":"https://api.onedrive.com/v1.0/shares/s!AkvcybxHlBS0kAEgrAsbNR5Gj39i/root/content","content":"<h1 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h1><p>枚举（Enum）类型用于取值被限定在一定范围内的场景，比如一周只能有七天，颜色限定为红绿蓝等。</p>\n<h2 id=\"简单的例子\"><a href=\"#简单的例子\" class=\"headerlink\" title=\"简单的例子\"></a>简单的例子</h2><p>枚举使用 <code>enum</code> 关键字来定义：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">enum Days &#123;Sun, Mon, Tue, Wed, Thu, Fri, Sat&#125;;</code></pre>\n\n<p>枚举成员会被赋值为从 <code>0</code> 开始递增的数字，同时也会对枚举值到枚举名进行反向映射：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">enum Days &#123;Sun, Mon, Tue, Wed, Thu, Fri, Sat&#125;;\n\nconsole.log(Days[&quot;Sun&quot;] &#x3D;&#x3D;&#x3D; 0); &#x2F;&#x2F; true\nconsole.log(Days[&quot;Mon&quot;] &#x3D;&#x3D;&#x3D; 1); &#x2F;&#x2F; true\nconsole.log(Days[&quot;Tue&quot;] &#x3D;&#x3D;&#x3D; 2); &#x2F;&#x2F; true\nconsole.log(Days[&quot;Sat&quot;] &#x3D;&#x3D;&#x3D; 6); &#x2F;&#x2F; true\n\nconsole.log(Days[0] &#x3D;&#x3D;&#x3D; &quot;Sun&quot;); &#x2F;&#x2F; true\nconsole.log(Days[1] &#x3D;&#x3D;&#x3D; &quot;Mon&quot;); &#x2F;&#x2F; true\nconsole.log(Days[2] &#x3D;&#x3D;&#x3D; &quot;Tue&quot;); &#x2F;&#x2F; true\nconsole.log(Days[6] &#x3D;&#x3D;&#x3D; &quot;Sat&quot;); &#x2F;&#x2F; true</code></pre>\n\n<p>事实上，上面的例子会被编译为：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var Days;\n(function (Days) &#123;\n    Days[Days[&quot;Sun&quot;] &#x3D; 0] &#x3D; &quot;Sun&quot;;\n    Days[Days[&quot;Mon&quot;] &#x3D; 1] &#x3D; &quot;Mon&quot;;\n    Days[Days[&quot;Tue&quot;] &#x3D; 2] &#x3D; &quot;Tue&quot;;\n    Days[Days[&quot;Wed&quot;] &#x3D; 3] &#x3D; &quot;Wed&quot;;\n    Days[Days[&quot;Thu&quot;] &#x3D; 4] &#x3D; &quot;Thu&quot;;\n    Days[Days[&quot;Fri&quot;] &#x3D; 5] &#x3D; &quot;Fri&quot;;\n    Days[Days[&quot;Sat&quot;] &#x3D; 6] &#x3D; &quot;Sat&quot;;\n&#125;)(Days || (Days &#x3D; &#123;&#125;));</code></pre>\n\n<h2 id=\"手动赋值\"><a href=\"#手动赋值\" class=\"headerlink\" title=\"手动赋值\"></a>手动赋值</h2><p>我们也可以给枚举项手动赋值：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">enum Days &#123;Sun &#x3D; 7, Mon &#x3D; 1, Tue, Wed, Thu, Fri, Sat&#125;;\n\nconsole.log(Days[&quot;Sun&quot;] &#x3D;&#x3D;&#x3D; 7); &#x2F;&#x2F; true\nconsole.log(Days[&quot;Mon&quot;] &#x3D;&#x3D;&#x3D; 1); &#x2F;&#x2F; true\nconsole.log(Days[&quot;Tue&quot;] &#x3D;&#x3D;&#x3D; 2); &#x2F;&#x2F; true\nconsole.log(Days[&quot;Sat&quot;] &#x3D;&#x3D;&#x3D; 6); &#x2F;&#x2F; true</code></pre>\n\n<p>上面的例子中，未手动赋值的枚举项会接着上一个枚举项递增。</p>\n<p>如果未手动赋值的枚举项与手动赋值的重复了，TypeScript 是不会察觉到这一点的：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">enum Days &#123;Sun &#x3D; 3, Mon &#x3D; 1, Tue, Wed, Thu, Fri, Sat&#125;;\n\nconsole.log(Days[&quot;Sun&quot;] &#x3D;&#x3D;&#x3D; 3); &#x2F;&#x2F; true\nconsole.log(Days[&quot;Wed&quot;] &#x3D;&#x3D;&#x3D; 3); &#x2F;&#x2F; true\nconsole.log(Days[3] &#x3D;&#x3D;&#x3D; &quot;Sun&quot;); &#x2F;&#x2F; false\nconsole.log(Days[3] &#x3D;&#x3D;&#x3D; &quot;Wed&quot;); &#x2F;&#x2F; true</code></pre>\n\n<p>上面的例子中，递增到 <code>3</code> 的时候与前面的 <code>Sun</code> 的取值重复了，但是 TypeScript 并没有报错，导致 <code>Days[3]</code> 的值先是 <code>&quot;Sun&quot;</code>，而后又被 <code>&quot;Wed&quot;</code> 覆盖了。编译的结果是：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var Days;\n(function (Days) &#123;\n    Days[Days[&quot;Sun&quot;] &#x3D; 3] &#x3D; &quot;Sun&quot;;\n    Days[Days[&quot;Mon&quot;] &#x3D; 1] &#x3D; &quot;Mon&quot;;\n    Days[Days[&quot;Tue&quot;] &#x3D; 2] &#x3D; &quot;Tue&quot;;\n    Days[Days[&quot;Wed&quot;] &#x3D; 3] &#x3D; &quot;Wed&quot;;\n    Days[Days[&quot;Thu&quot;] &#x3D; 4] &#x3D; &quot;Thu&quot;;\n    Days[Days[&quot;Fri&quot;] &#x3D; 5] &#x3D; &quot;Fri&quot;;\n    Days[Days[&quot;Sat&quot;] &#x3D; 6] &#x3D; &quot;Sat&quot;;\n&#125;)(Days || (Days &#x3D; &#123;&#125;));</code></pre>\n\n<p>所以使用的时候需要注意，最好不要出现这种覆盖的情况。</p>\n<p>手动赋值的枚举项可以不是数字，此时需要使用类型断言来让 tsc 无视类型检查 (编译出的 js 仍然是可用的)：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">enum Days &#123;Sun &#x3D; 7, Mon, Tue, Wed, Thu, Fri, Sat &#x3D; &lt;any&gt;&quot;S&quot;&#125;;\nvar Days;\n(function (Days) &#123;\n    Days[Days[&quot;Sun&quot;] &#x3D; 7] &#x3D; &quot;Sun&quot;;\n    Days[Days[&quot;Mon&quot;] &#x3D; 8] &#x3D; &quot;Mon&quot;;\n    Days[Days[&quot;Tue&quot;] &#x3D; 9] &#x3D; &quot;Tue&quot;;\n    Days[Days[&quot;Wed&quot;] &#x3D; 10] &#x3D; &quot;Wed&quot;;\n    Days[Days[&quot;Thu&quot;] &#x3D; 11] &#x3D; &quot;Thu&quot;;\n    Days[Days[&quot;Fri&quot;] &#x3D; 12] &#x3D; &quot;Fri&quot;;\n    Days[Days[&quot;Sat&quot;] &#x3D; &quot;S&quot;] &#x3D; &quot;Sat&quot;;\n&#125;)(Days || (Days &#x3D; &#123;&#125;));</code></pre>\n\n<p>当然，手动赋值的枚举项也可以为小数或负数，此时后续未手动赋值的项的递增步长仍为 <code>1</code>：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">enum Days &#123;Sun &#x3D; 7, Mon &#x3D; 1.5, Tue, Wed, Thu, Fri, Sat&#125;;\n\nconsole.log(Days[&quot;Sun&quot;] &#x3D;&#x3D;&#x3D; 7); &#x2F;&#x2F; true\nconsole.log(Days[&quot;Mon&quot;] &#x3D;&#x3D;&#x3D; 1.5); &#x2F;&#x2F; true\nconsole.log(Days[&quot;Tue&quot;] &#x3D;&#x3D;&#x3D; 2.5); &#x2F;&#x2F; true\nconsole.log(Days[&quot;Sat&quot;] &#x3D;&#x3D;&#x3D; 6.5); &#x2F;&#x2F; true</code></pre>\n\n<h2 id=\"常数项和计算所得项\"><a href=\"#常数项和计算所得项\" class=\"headerlink\" title=\"常数项和计算所得项\"></a>常数项和计算所得项</h2><p>枚举项有两种类型：常数项（constant member）和计算所得项（computed member）。</p>\n<p>前面我们所举的例子都是常数项，一个典型的计算所得项的例子：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">enum Color &#123;Red, Green, Blue &#x3D; &quot;blue&quot;.length&#125;;</code></pre>\n\n<p>上面的例子中，<code>&quot;blue&quot;.length</code> 就是一个计算所得项。</p>\n<p>上面的例子不会报错，但是<strong>如果紧接在计算所得项后面的是未手动赋值的项，那么它就会因为无法获得初始值而报错</strong>：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">enum Color &#123;Red &#x3D; &quot;red&quot;.length, Green, Blue&#125;;\n\n&#x2F;&#x2F; index.ts(1,33): error TS1061: Enum member must have initializer.\n&#x2F;&#x2F; index.ts(1,40): error TS1061: Enum member must have initializer.</code></pre>\n\n<p>下面是常数项和计算所得项的完整定义，部分引用自<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Enums.html\">中文手册 - 枚举</a>：</p>\n<p>当满足以下条件时，枚举成员被当作是常数：</p>\n<ul>\n<li>不具有初始化函数并且之前的枚举成员是常数。在这种情况下，当前枚举成员的值为上一个枚举成员的值加 <code>1</code>。但第一个枚举元素是个例外。如果它没有初始化方法，那么它的初始值为 <code>0</code>。</li>\n<li>枚举成员使用常数枚举表达式初始化。常数枚举表达式是 TypeScript 表达式的子集，它可以在编译阶段求值。当一个表达式满足下面条件之一时，它就是一个常数枚举表达式：<ul>\n<li>数字字面量</li>\n<li>引用之前定义的常数枚举成员（可以是在不同的枚举类型中定义的）如果这个成员是在同一个枚举类型中定义的，可以使用非限定名来引用</li>\n<li>带括号的常数枚举表达式</li>\n<li><code>+</code>, <code>-</code>, <code>~</code> 一元运算符应用于常数枚举表达式</li>\n<li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>, <code>&amp;</code>, <code>|</code>, <code>^</code> 二元运算符，常数枚举表达式做为其一个操作对象。若常数枚举表达式求值后为 NaN 或 Infinity，则会在编译阶段报错</li>\n</ul>\n</li>\n</ul>\n<p>所有其它情况的枚举成员被当作是需要计算得出的值。</p>\n<h2 id=\"常数枚举\"><a href=\"#常数枚举\" class=\"headerlink\" title=\"常数枚举\"></a>常数枚举</h2><p>常数枚举是使用 <code>const enum</code> 定义的枚举类型：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">const enum Directions &#123;\n    Up,\n    Down,\n    Left,\n    Right\n&#125;\n\nlet directions &#x3D; [Directions.Up, Directions.Down, Directions.Left, Directions.Right];</code></pre>\n\n<p>常数枚举与普通枚举的区别是，它会在编译阶段被删除，并且不能包含计算成员。</p>\n<p>上例的编译结果是：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var directions &#x3D; [0 &#x2F;* Up *&#x2F;, 1 &#x2F;* Down *&#x2F;, 2 &#x2F;* Left *&#x2F;, 3 &#x2F;* Right *&#x2F;];</code></pre>\n\n<p>假如包含了计算成员，则会在编译阶段报错：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">const enum Color &#123;Red, Green, Blue &#x3D; &quot;blue&quot;.length&#125;;\n\n&#x2F;&#x2F; index.ts(1,38): error TS2474: In &#39;const&#39; enum declarations member initializer must be constant expression.</code></pre>\n\n<h2 id=\"外部枚举\"><a href=\"#外部枚举\" class=\"headerlink\" title=\"外部枚举\"></a>外部枚举</h2><p>外部枚举（Ambient Enums）是使用 <code>declare enum</code> 定义的枚举类型：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">declare enum Directions &#123;\n    Up,\n    Down,\n    Left,\n    Right\n&#125;\n\nlet directions &#x3D; [Directions.Up, Directions.Down, Directions.Left, Directions.Right];</code></pre>\n\n<p>之前提到过，<code>declare</code> 定义的类型只会用于编译时的检查，编译结果中会被删除。</p>\n<p>上例的编译结果是：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var directions &#x3D; [Directions.Up, Directions.Down, Directions.Left, Directions.Right];</code></pre>\n\n<p>外部枚举与声明语句一样，常出现在声明文件中。</p>\n<p>同时使用 <code>declare</code> 和 <code>const</code> 也是可以的：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">declare const enum Directions &#123;\n    Up,\n    Down,\n    Left,\n    Right\n&#125;\n\nlet directions &#x3D; [Directions.Up, Directions.Down, Directions.Left, Directions.Right];</code></pre>\n\n<p>编译结果：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var directions &#x3D; [0 &#x2F;* Up *&#x2F;, 1 &#x2F;* Down *&#x2F;, 2 &#x2F;* Left *&#x2F;, 3 &#x2F;* Right *&#x2F;];</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>TypeScript 的枚举类型的概念<a href=\"https://msdn.microsoft.com/zh-cn/library/sbbt4032.aspx\">来源于 C#</a>。</p></blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/enums.html\">Enums</a>（<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Enums.html\">中文版</a>）</li>\n<li><a href=\"https://msdn.microsoft.com/zh-cn/library/sbbt4032.aspx\">C# Enum</a></li>\n</ul>\n","text":"枚举枚举（Enum）类型用于取值被限定在一定范围内的场景，比如一周只能有七天，颜色限定为红绿蓝等。 简单的例子枚举使用 enum 关键字来定义： enum Days &#123;Sun, Mon, Tue, Wed, Thu, Fri, Sat&#125;; 枚举成员会被赋值为从...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"TypeScript入门","slug":"TypeScript入门","count":19,"path":"api/categories/TypeScript入门.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":23,"path":"api/tags/TypeScript.json"},{"name":"进阶","slug":"进阶","count":8,"path":"api/tags/进阶.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9E%9A%E4%B8%BE\"><span class=\"toc-text\">枚举</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E7%9A%84%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">简单的例子</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%8A%A8%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">手动赋值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E6%95%B0%E9%A1%B9%E5%92%8C%E8%AE%A1%E7%AE%97%E6%89%80%E5%BE%97%E9%A1%B9\"><span class=\"toc-text\">常数项和计算所得项</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E6%95%B0%E6%9E%9A%E4%B8%BE\"><span class=\"toc-text\">常数枚举</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%96%E9%83%A8%E6%9E%9A%E4%B8%BE\"><span class=\"toc-text\">外部枚举</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol></li></ol>","author":{"name":"木木木","slug":"blog-author","avatar":"https://homeimage.hoiyee.net/lbs/2023-1-3/ywa8wim0wn_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230103144606.jpg","link":"/","description":"一位正在重塑和新增知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"进阶 - 类","uid":"9f43aa5c8aeb36a61685f7ea1f1e54fa","slug":"typescript/进阶/类","date":"2023-01-13T06:12:38.033Z","updated":"2023-01-13T06:24:26.913Z","comments":true,"path":"api/articles/typescript/进阶/类.json","keywords":null,"cover":"https://api.onedrive.com/v1.0/shares/s!AkvcybxHlBS0kAEgrAsbNR5Gj39i/root/content","text":"类传统方法中，JavaScript 通过构造函数实现类的概念，通过原型链实现继承。而在 ES6 中，我们终于迎来了 class。 TypeScript 除了实现了所有 ES6 中的类的功能以外，还添加了一些新的用法。 这一节主要介绍类的用法，下一节再介绍如何定义类的类型。 类的概...","link":"","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[{"name":"TypeScript入门","slug":"TypeScript入门","count":19,"path":"api/categories/TypeScript入门.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":23,"path":"api/tags/TypeScript.json"},{"name":"进阶","slug":"进阶","count":8,"path":"api/tags/进阶.json"}],"author":{"name":"木木木","slug":"blog-author","avatar":"https://homeimage.hoiyee.net/lbs/2023-1-3/ywa8wim0wn_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230103144606.jpg","link":"/","description":"一位正在重塑和新增知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"进阶 - 元组","uid":"f170bca01aa22bf32b2d78c42b7de103","slug":"typescript/进阶/元组","date":"2023-01-11T06:10:12.585Z","updated":"2023-01-13T07:13:07.846Z","comments":true,"path":"api/articles/typescript/进阶/元组.json","keywords":null,"cover":"https://api.onedrive.com/v1.0/shares/s!AkvcybxHlBS0kAEgrAsbNR5Gj39i/root/content","text":"元组数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象。 元组起源于函数编程语言（如 F#），这些语言中会频繁使用 元组。 简单的例子定义一对值分别为 string 和 number 的元组： let tom: [string, number] &#x3D; [&...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"TypeScript入门","slug":"TypeScript入门","count":19,"path":"api/categories/TypeScript入门.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":23,"path":"api/tags/TypeScript.json"},{"name":"进阶","slug":"进阶","count":8,"path":"api/tags/进阶.json"}],"author":{"name":"木木木","slug":"blog-author","avatar":"https://homeimage.hoiyee.net/lbs/2023-1-3/ywa8wim0wn_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230103144606.jpg","link":"/","description":"一位正在重塑和新增知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}