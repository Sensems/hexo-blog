{"title":"进阶 - 声明合并","uid":"bb9a845fbb318ca0c43a367531668643","slug":"typescript/进阶/声明合并","date":"2023-01-13T06:56:55.700Z","updated":"2023-01-13T07:12:52.754Z","comments":true,"path":"api/articles/typescript/进阶/声明合并.json","keywords":null,"cover":"https://api.onedrive.com/v1.0/shares/s!AkvcybxHlBS0kAEgrAsbNR5Gj39i/root/content","content":"<h1 id=\"声明合并\"><a href=\"#声明合并\" class=\"headerlink\" title=\"声明合并\"></a>声明合并</h1><p>如果定义了两个相同名字的函数、接口或类，那么它们会合并成一个类型：</p>\n<h2 id=\"函数的合并\"><a href=\"#函数的合并\" class=\"headerlink\" title=\"函数的合并\"></a>函数的合并</h2><p><a href=\"https://ts.xcatliu.com/basics/type-of-function.html#%E9%87%8D%E8%BD%BD\">之前学习过</a>，我们可以使用重载定义多个函数类型：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">function reverse(x: number): number;\nfunction reverse(x: string): string;\nfunction reverse(x: number | string): number | string &#123;\n    if (typeof x &#x3D;&#x3D;&#x3D; &#39;number&#39;) &#123;\n        return Number(x.toString().split(&#39;&#39;).reverse().join(&#39;&#39;));\n    &#125; else if (typeof x &#x3D;&#x3D;&#x3D; &#39;string&#39;) &#123;\n        return x.split(&#39;&#39;).reverse().join(&#39;&#39;);\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"接口的合并\"><a href=\"#接口的合并\" class=\"headerlink\" title=\"接口的合并\"></a>接口的合并</h2><p>接口中的属性在合并时会简单的合并到一个接口中：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">interface Alarm &#123;\n    price: number;\n&#125;\ninterface Alarm &#123;\n    weight: number;\n&#125;</code></pre>\n\n<p>相当于：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">interface Alarm &#123;\n    price: number;\n    weight: number;\n&#125;</code></pre>\n\n<p>注意，<strong>合并的属性的类型必须是唯一的</strong>：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">interface Alarm &#123;\n    price: number;\n&#125;\ninterface Alarm &#123;\n    price: number;  &#x2F;&#x2F; 虽然重复了，但是类型都是 &#96;number&#96;，所以不会报错\n    weight: number;\n&#125;\ninterface Alarm &#123;\n    price: number;\n&#125;\ninterface Alarm &#123;\n    price: string;  &#x2F;&#x2F; 类型不一致，会报错\n    weight: number;\n&#125;\n\n&#x2F;&#x2F; index.ts(5,3): error TS2403: Subsequent variable declarations must have the same type.  Variable &#39;price&#39; must be of type &#39;number&#39;, but here has type &#39;string&#39;.</code></pre>\n\n<p>接口中方法的合并，与函数的合并一样：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">interface Alarm &#123;\n    price: number;\n    alert(s: string): string;\n&#125;\ninterface Alarm &#123;\n    weight: number;\n    alert(s: string, n: number): string;\n&#125;</code></pre>\n\n<p>相当于：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">interface Alarm &#123;\n    price: number;\n    weight: number;\n    alert(s: string): string;\n    alert(s: string, n: number): string;\n&#125;</code></pre>\n\n<h2 id=\"类的合并\"><a href=\"#类的合并\" class=\"headerlink\" title=\"类的合并\"></a>类的合并</h2><p>类的合并与接口的合并规则一致。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.typescriptlang.org/docs/handbook/declaration-merging.html\">Declaration Merging</a>（[中文版](<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Declaration\">https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Declaration</a> Merging.html)）</li>\n</ul>\n","feature":true,"text":"声明合并如果定义了两个相同名字的函数、接口或类，那么它们会合并成一个类型： 函数的合并之前学习过，我们可以使用重载定义多个函数类型： function reverse(x: number): number; function reverse(x: string): string;...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"TypeScript入门","slug":"TypeScript入门","count":19,"path":"api/categories/TypeScript入门.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":23,"path":"api/tags/TypeScript.json"},{"name":"进阶","slug":"进阶","count":8,"path":"api/tags/进阶.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E5%90%88%E5%B9%B6\"><span class=\"toc-text\">声明合并</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E7%9A%84%E5%90%88%E5%B9%B6\"><span class=\"toc-text\">函数的合并</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%90%88%E5%B9%B6\"><span class=\"toc-text\">接口的合并</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E7%9A%84%E5%90%88%E5%B9%B6\"><span class=\"toc-text\">类的合并</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol></li></ol>","author":{"name":"木木木","slug":"blog-author","avatar":"https://homeimage.hoiyee.net/lbs/2023-1-3/ywa8wim0wn_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230103144606.jpg","link":"/","description":"一位正在重塑和新增知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"类型体操","uid":"5cc78ae24a289c99c5b0c875ca9c00ef","slug":"typescript/类型体操/类型体操姿势合集","date":"2023-01-13T09:08:03.990Z","updated":"2023-01-13T09:20:46.434Z","comments":true,"path":"api/articles/typescript/类型体操/类型体操姿势合集.json","keywords":null,"cover":"https://s2.loli.net/2023/01/13/DqyIxBi6EgSbKCH.jpg","text":"TypeScript 类型体操姿势合集本博客是对[Type&lt;Challenge[]&gt;](type-challenges/README.zh-CN.md at main · type-challenges/type-challenges (github.com))类型体...","link":"","photos":[],"count_time":{"symbolsCount":296,"symbolsTime":"1 mins."},"categories":[{"name":"TypeScript类型体操","slug":"TypeScript类型体操","count":1,"path":"api/categories/TypeScript类型体操.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":23,"path":"api/tags/TypeScript.json"},{"name":"类型体操","slug":"类型体操","count":1,"path":"api/tags/类型体操.json"}],"author":{"name":"木木木","slug":"blog-author","avatar":"https://homeimage.hoiyee.net/lbs/2023-1-3/ywa8wim0wn_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230103144606.jpg","link":"/","description":"一位正在重塑和新增知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"进阶 - 泛型","uid":"d6f1b6e982ce476d664aab7cf5051e90","slug":"typescript/进阶/泛型","date":"2023-01-13T06:55:07.240Z","updated":"2023-01-13T07:12:32.840Z","comments":true,"path":"api/articles/typescript/进阶/泛型.json","keywords":null,"cover":"https://api.onedrive.com/v1.0/shares/s!AkvcybxHlBS0kAEgrAsbNR5Gj39i/root/content","text":"泛型泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。 简单的例子首先，我们来实现一个函数 createArray，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值： function createArra...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"TypeScript入门","slug":"TypeScript入门","count":19,"path":"api/categories/TypeScript入门.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":23,"path":"api/tags/TypeScript.json"},{"name":"进阶","slug":"进阶","count":8,"path":"api/tags/进阶.json"}],"author":{"name":"木木木","slug":"blog-author","avatar":"https://homeimage.hoiyee.net/lbs/2023-1-3/ywa8wim0wn_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230103144606.jpg","link":"/","description":"一位正在重塑和新增知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}